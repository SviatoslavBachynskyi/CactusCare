// <auto-generated />
using System;
using CactusCare.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CactusCare.DAL.Migrations
{
    [DbContext(typeof(CactusCareContext))]
    [Migration("20191202204319_CactusCareWithReviews")]
    partial class CactusCareWithReviews
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CactusCare.Abstractions.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "First",
                            HospitalId = 1,
                            LastName = "Ivanov",
                            SpecialityId = 1
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Secon",
                            HospitalId = 2,
                            LastName = "Ivanov",
                            SpecialityId = 2
                        });
                });

            modelBuilder.Entity("CactusCare.Abstractions.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Адреса 1",
                            Email = "емейл@емейл1",
                            Name = "Лікарня 1",
                            PhoneNumber = "(032) 345 45",
                            Website = "hos1.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Адреса 2",
                            Email = "емейл@емейл2",
                            Name = "Лікарня 2",
                            PhoneNumber = "(032) 756 64",
                            Website = "hos2.com"
                        });
                });

            modelBuilder.Entity("CactusCare.Abstractions.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Чудовий лікар!",
                            DoctorId = 1,
                            Time = new DateTime(2019, 12, 2, 22, 43, 19, 58, DateTimeKind.Local).AddTicks(1391)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Погоджуюсь. Неймовірний лікар.",
                            DoctorId = 1,
                            Time = new DateTime(2019, 12, 2, 22, 43, 19, 60, DateTimeKind.Local).AddTicks(8490)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Жахливий лікар!",
                            DoctorId = 2,
                            Time = new DateTime(2019, 12, 2, 22, 43, 19, 60, DateTimeKind.Local).AddTicks(8554)
                        });
                });

            modelBuilder.Entity("CactusCare.Abstractions.Entities.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "тест"
                        },
                        new
                        {
                            Id = 2,
                            Name = "тест 2"
                        });
                });

            modelBuilder.Entity("CactusCare.Abstractions.Entities.Doctor", b =>
                {
                    b.HasOne("CactusCare.Abstractions.Entities.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_Doctor_Hospital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CactusCare.Abstractions.Entities.Speciality", "Speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityId")
                        .HasConstraintName("FK_Doctor_Speciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CactusCare.Abstractions.Entities.Review", b =>
                {
                    b.HasOne("CactusCare.Abstractions.Entities.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Doctor_Review")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
